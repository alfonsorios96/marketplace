openapi: 3.0.3
info:
  title: Orders API
  version: 1.0.0
  description: API for managing marketplace orders, including order lifecycle and state transitions.
servers:
  - url: http://localhost:3002/v1/orders
    description: Local development
tags:
  - name: Orders
    description: Operations related to orders
paths:
  /:
    post:
      tags: [Orders]
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: Successfully created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input data

    get:
      tags: [Orders]
      summary: List orders
      operationId: listOrders
      parameters:
        - name: seller_id
          in: query
          required: true
          schema:
            type: string
          example: seller_789
          description: Seller ID
        - name: status
          in: query
          schema:
            type: string
            enum: [CREATED, ACCEPTED, REJECTED, SHIPPING_IN_PROGRESS, SHIPPED]
          description: Filter by order status
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /{id}:
    get:
      tags: [Orders]
      summary: Get order details
      operationId: getOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: order_123
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    patch:
      tags: [Orders]
      summary: Update order status
      operationId: updateOrderStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatus'
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status transition

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 5f9d7b3b9d3f3b0017b0b1b1
        status:
          type: string
          enum: [CREATED, ACCEPTED, REJECTED, SHIPPING_IN_PROGRESS, SHIPPED]
          example: CREATED
        product_id:
          type: string
          example: prod_123
        price:
          type: number
          format: float
          example: 299.99
        quantity:
          type: integer
          minimum: 1
          example: 2
        customer_id:
          type: string
          example: cust_456
        seller_id:
          type: string
          example: seller_789
        created_at:
          type: string
          format: date-time
          example: 2025-04-17T04:43:00Z
        updated_at:
          type: string
          format: date-time
          example: 2025-04-17T04:43:00Z
      required:
        - id
        - status
        - product_id
        - price
        - quantity
        - customer_id
        - seller_id
        - created_at

    CreateOrder:
      type: object
      properties:
        product_id:
          type: string
          example: prod_123
        price:
          type: number
          format: float
          example: 299.99
        quantity:
          type: integer
          minimum: 1
          example: 2
        customer_id:
          type: string
          example: cust_456
        seller_id:
          type: string
          example: seller_789
      required:
        - product_id
        - price
        - quantity
        - customer_id
        - seller_id

    UpdateOrderStatus:
      type: object
      properties:
        status:
          type: string
          enum: [ACCEPTED, REJECTED, SHIPPING_IN_PROGRESS, SHIPPED]
          example: ACCEPTED
      required:
        - status

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []